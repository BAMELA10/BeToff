// <auto-generated />
using System;
using BeToff.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeToff.Entities.Migrations
{
    [DbContext(typeof(BeToffDbContext))]
    [Migration("20250828012930_PhotoFamilly")]
    partial class PhotoFamilly
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeToff.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date");

                    b.Property<Guid>("IdAuthor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPhoto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdPhoto");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BeToff.Entities.Familly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date");

                    b.Property<Guid>("IdCreator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHead")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NameOfFamilly");

                    b.HasKey("Id");

                    b.HasIndex("IdCreator");

                    b.HasIndex("IdHead");

                    b.ToTable("Famillies");
                });

            modelBuilder.Entity("BeToff.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ExpireAt")
                        .HasColumnType("date");

                    b.Property<Guid>("FamillyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("SendAt")
                        .HasColumnType("date");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamillyId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("BeToff.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Photos");

                    b.HasDiscriminator().HasValue("Photo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeToff.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfregistation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FamillyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FamillyId");

                    b.HasIndex("UserId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("BeToff.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateJoined")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeToff.Entities.PhotoFamilly", b =>
                {
                    b.HasBaseType("BeToff.Entities.Photo");

                    b.Property<Guid>("FamillyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FamillyId");

                    b.HasDiscriminator().HasValue("PhotoFamilly");
                });

            modelBuilder.Entity("BeToff.Entities.Comment", b =>
                {
                    b.HasOne("BeToff.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BeToff.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("IdPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("BeToff.Entities.Familly", b =>
                {
                    b.HasOne("BeToff.Entities.User", "CreatedBy")
                        .WithMany("FamilliesCreator")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BeToff.Entities.User", "Headof")
                        .WithMany("FamilliesHeadof")
                        .HasForeignKey("IdHead")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Headof");
                });

            modelBuilder.Entity("BeToff.Entities.Invitation", b =>
                {
                    b.HasOne("BeToff.Entities.Familly", "FamillyItem")
                        .WithMany("Invitations")
                        .HasForeignKey("FamillyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BeToff.Entities.User", "Receiver")
                        .WithMany("InvitationsReceiver")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BeToff.Entities.User", "Sender")
                        .WithMany("InvitationsSender")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FamillyItem");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BeToff.Entities.Photo", b =>
                {
                    b.HasOne("BeToff.Entities.User", "Author")
                        .WithMany("Photos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BeToff.Entities.Registration", b =>
                {
                    b.HasOne("BeToff.Entities.Familly", "Familly")
                        .WithMany("Registrations")
                        .HasForeignKey("FamillyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeToff.Entities.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familly");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeToff.Entities.PhotoFamilly", b =>
                {
                    b.HasOne("BeToff.Entities.Familly", "Family")
                        .WithMany("photoFamillies")
                        .HasForeignKey("FamillyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("BeToff.Entities.Familly", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Registrations");

                    b.Navigation("photoFamillies");
                });

            modelBuilder.Entity("BeToff.Entities.User", b =>
                {
                    b.Navigation("FamilliesCreator");

                    b.Navigation("FamilliesHeadof");

                    b.Navigation("InvitationsReceiver");

                    b.Navigation("InvitationsSender");

                    b.Navigation("Photos");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
